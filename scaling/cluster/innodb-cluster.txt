## Prepare Server with MySql installed
- 157.245.196.139 - instance 1
- 157.245.52.72 - instance 2
- 206.189.35.68 - instance 3

## Install MySql Shell
$> sudo apt-get update
$> sudo apt-get install mysql-shell -- or sudo snap install mysql-shell

## Install MySql Router
$> sudo apt-get update
$> sudo apt-get install mysql-router

## Setup Innodb cluster
-- Start with group replication and create cluster
-- or, create cluster directly from one of nodes then group replication auto created


## Setup server 1
$> mysqlsh
mysql-js> \connect root@157.245.196.139  -- or shell.connect("root@157.245.196.139")
mysql-js> dba.createCluster("myCluster"); -- if current instance is not met requirement of cluster will error and need to configureInstance() first

-- check current server if configurations for cluster are met
mysql-js> dba.checkInstanceConfiguration();

-- auto fix configuration instance
mysql-js> dba.configureInstance();


## Setup server 2
-- You can login into server 2 or you can configure from any server
mysql-js> dba.checkInstanceConfiguration("root@157.245.52.72:3306");

-- auto configure instance
mysql-js> dba.configureInstance("root@157.245.52.72:3306");


## Setup server 3
-- You can login into server 3 or you can configure from any server
mysql-js> dba.checkInstanceConfiguration("root@206.189.35.68:3306");

-- auto configure instance
mysql-js> dba.configureInstance("root@206.189.35.68:3306");


## Create new cluster
-- after configure instances, from any server / instance run mysql shell, for example start from server 1
mysql-js> var cluster = dba.createCluster("myCluster");  -- auto add server 1 to cluster
mysql-js> cluster.addInstance("root@157.245.52.72:3306"); -- add server 2
mysql-js> cluster.addInstance("root@206.189.35.68:3306"); -- add server 3
mysql-js> cluster.status(); -- show status of cluster status


## Bootstrap MySql Router
$> mysqlrouter --bootstrap root@localhost:3310 --directory /tmp/myrouter --conf-use-sockets --account routerfriend --account-create always

Output:
### MySQL Classic protocol
- Read/Write Connections: localhost:6446, /tmp/myrouter/mysql.sock
- Read/Only Connections:  localhost:6447, /tmp/myrouter/mysqlro.sock

### MySQL X protocol
- Read/Write Connections: localhost:6448, /tmp/myrouter/mysqlx.sock
- Read/Only Connections:  localhost:6449, /tmp/myrouter/mysqlxro.sock

$> cd /tmp/myrouter
$> ./start.sh


## Check router from MySql shell
mysql-js> \c root@157.245.196.139:6447
mysql-js> \sql
mysql-sql> SELECT @@hostname; -- will showing instance handle Read/Only

mysql-sql> \c root@157.245.196.139:6446
mysql-sql> SELECT @@hostname; -- will showing instance handle Read/Write

## Connect the application
-- Set connection to mysql router read/write connection


## Remove instance
mysql-js> cluster.removeInstance('root@157.245.196.139:3306');
mysql-js> cluster.status();

## Rejoin instance
mysql-js> var cluster = dba.getCluster('myCluster');
mysql-js> cluster.rejoinInstance('root@157.245.196.139:3306');
mysql-js> cluster.status();

## Recovering cluster when all member offline
mysql-js> shell.connect('root@localhost:3310');
mysql-js> cluster = dba.getCluster();
mysql-js> var cluster = dba.rebootClusterFromCompleteOutage();
mysql-js> cluster.status();